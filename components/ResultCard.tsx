import { useState } from 'react'
import { Button } from './ui/Button'
import { BeforeAfterSlider } from './BeforeAfterSlider'

type ResultCardProps = {
    imageUrl: string
    modelName: string
    originalImageUrl?: string
    onSave?: () => void
    onDownload?: () => void
    saving?: boolean
}

export function ResultCard({
    imageUrl,
    modelName,
    originalImageUrl,
    onSave,
    onDownload,
    saving = false
}: ResultCardProps) {
    const [showComparison, setShowComparison] = useState(false)

    const handleDownload = async () => {
        if (onDownload) {
            onDownload()
            return
        }

        try {
            const response = await fetch(imageUrl)
            const blob = await response.blob()
            const url = window.URL.createObjectURL(blob)
            const a = document.createElement('a')
            a.href = url
            a.download = `framefor-${modelName.toLowerCase().replace(/\s+/g, '-')}-${Date.now()}.jpg`
            document.body.appendChild(a)
            a.click()
            window.URL.revokeObjectURL(url)
            document.body.removeChild(a)
        } catch (error) {
            console.error('Download failed:', error)
        }
    }

    return (
        <div className="overflow-hidden border rounded-lg bg-surface border-border">
            <div className="p-3 border-b bg-background border-border">
                <div className="flex items-center justify-between">
                    <div className="font-medium text-text">{modelName}</div>
                    {originalImageUrl && (
                        <button
                            onClick={() => setShowComparison(!showComparison)}
                            className="text-xs transition-colors text-primary hover:text-primary-dark"
                        >
                            {showComparison ? 'Show Result' : 'Compare'}
                        </button>
                    )}
                </div>
            </div>

            <div className="bg-background">
                {showComparison && originalImageUrl ? (
                    <BeforeAfterSlider
                        beforeImage={originalImageUrl}
                        afterImage={imageUrl}
                        beforeLabel="Original"
                        afterLabel="Generated"
                    />
                ) : (
                    <div className="relative" style={{ aspectRatio: '1/1' }}>
                        <img
                            src={imageUrl}
                            alt={`Generated by ${modelName}`}
                            className="object-cover w-full h-full"
                        />
                    </div>
                )}
            </div>

            <div className="flex gap-2 p-3">
                <Button
                    variant="ghost"
                    onClick={handleDownload}
                    className="flex-1"
                >
                    Download
                </Button>
                {onSave && (
                    <Button
                        onClick={onSave}
                        disabled={saving}
                        className="flex-1"
                    >
                        {saving ? 'Saving...' : 'Save to Gallery'}
                    </Button>
                )}
            </div>
        </div>
    )
}